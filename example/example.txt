no. the answer is no. at least in my opinion. but let's get to it first.

look, i am a cheapo. i i wear inexpensive clothes. i drive used, you know, toyota. this office is one of the cheapest in the city. the the the furniture that you see here, all the furniture here, is something that they wanted to throw away. and i was like, can you give it to me instead? and they were like, yeah, sure. and so so yeah, i am a cheap person. 

but, i don't mind spending money for things that i find important. especially equipment. i have a business here. i'm a lecturer and a game developer, and of course i understand that businesses have expenses expenses. i like the analogy with farmers and tractors, right? so so if i didn't have a software development and lecturing business, and instead i had an agricultural business, i would be buying a tractor once in a while. and tractors, i learned today, are pretty expensive. like fifty thousand dollars for a used, but still pretty high-end, tractor, apparently. that's that's pretty expensive. but if you want to do your job well, you sometimes need a tractor. and and that tractor, you probably don't want to be too cheap about the tractor because it's something that you will be using eight hours a day at least. it needs to do all the things. it needs to be reliable and stuff. so, the same way that i would be buying good tractors if i were a farmer, i don't mind spending money for equipment that lets me be a good developer. like a computer!

so when i learned that there is a new machine on the market that has, in some ways, unprecedented computing power, i was like: i'm listening. and i'm of course talking about the new Mac Studio with the M1 Ultra chip. and then someone said that "this thing right here is literally the best mac ever made for programming".

i was ready to investigate. when there is a new tractor on the market that is apparently the best for the job that i'm trying to do then i should probably look into it. so, the first thing that i did was i looked at YouTube videos. not the apple event because that's basically like a one hour long advertisement. "Mac Studio is a breakthrough". 
"M1 Ultra is the next breakthrough". "Silicon enables us to provide experiences that no one else can". But on people who are reviewing stuff. and i looked at them and their benchmarks, and i spent a good, i don't know, half an hour, maybe, or even more, just kind of looking at youtube videos, getting excited. then i realized, okay, so this is a lot of money. i should probably be a lot more analytical. and so this video is about my process of thinking about it, in an analytical sense. and how i went about it. in the end, i realized that the Mac Studio with the Ultra chip is not worth it. definitely not for me, and i would wager that not for most developers out there. and then i was like, did i just spend four hours of my day trying to get to this conclusion? and, like, making spreadsheets and watching videos and doing benchmarks and so on? so, i realized, okay what i'll do, is: i'll spend another four hours, at least, making a video about it. just, like and subscribe okay?

first, let's talk about why even choose a mac at all for software development. and i'm not trying to persuade anyone about anything. and i realize that this is a topic for more than a single video even, let alone just a part of a video. but i just want to dispel the myth that macs are used only because of marketing. only because of the shininess of this thing. that's not true.

to be honest, this myth is not completely unfounded, right? apple spends a ton of money for marketing, and they are known for bending the facts in order to tell the narrative that, you know, apple products are best at everything, and they were the first to do everything, and they're like super innovative and stuff like this. which is not always the truth.

it does make sense to be very wary of anything that apple is trying to sell you.

but i have a very real comparison here. about three years ago i needed to buy a new development computer for personal use. i used, you know, i was employed at google, so obviously i had no trouble having a development computer for work. but for personal use, i didn't have anything, and i decided to go for a window / linux laptop. and i also decided to go for the top of the line of those things, right? so i spent a lot of money. my windows / linux laptop is almost two times more expensive than my current macbook so it's not like... i hate it when sometimes people compare, you know, a $800 windows laptop with a $2,000 macbook pro, and they're like, oh, the macbook Pro has a better finish or whatever. it just doesn't make any sense. but this is the opposite. the linux / windows machine is much more expensive than the macbook. and yet here we are. i'm using the macbook for everything. for for development, for video editing work, for graphics work, for everything. i was very motivated to switch to linux / windows. and it just didn't work.

one reason for this is that the lowly macbook works faster. and it shouldn't, right? by sheer power, it should be slower. but for almost anything that matters, the macbook works faster than the windows / linux laptop. i think i'll show you some benchmarks later that show even my windows / linux laptop, so that you can compare what i see in normal life.

there are of course some unfair reasons, too. for example, it is not linux's fault that there are no good graphical um design suites on linux. at least in my opinion. and i am a game developer. so so i do need to sometimes work on graphics. i also sometimes need to work on music, and sound, and stuff like this. these all are much better on macbook than on a linux or windows machine. in, again, in my opinion. look, i i want to stress that this is not an attack on anyone's choices. i'm not trying to persuade anyone that they should switch to mac or whatever. it has a lot of issues as well. i'm just trying to dispel the myth that uh the only reason why developers, especially in recent years, switch to mac, is because of marketing. or because of shininess. it's it's not true.

okay, back to the mac Studio with the Ultra chip. at first, i was really impressed, i have to admit. i looked at the benchmarks, and i started putting them into the spreadsheet, and they mostly looked amazing. everything was faster, some things were much faster. like, two times faster than the top of the line that is currently the case. so i was very, like, oh, okay, so this might be a thing! i might actually be buying this! whoa! but then i noticed one thing. there were benchmarks where the mac Studio completely killed. like as i said, some benchmarks two times faster than the top of the line up till today, right? and then there were ones that were still often faster but not by much. and sometimes almost by nothing. and the ones where mac Studio ultra killed was things like very parallelizable um things. like ray tracing, or sometimes export of video and stuff like this. and the ones where it didn't completely kill where things that were more like, in my purview. things like, for example, xcode export. or even just some, you know, export of video. but like a normal video and not the perfect thing that could be exported from the mac studio ultra, right?

so, yes the benchmarks were always very impressive, but the really _really_ impressive ones, the ones that would blow your mind, were very specific for long-running batch jobs that you ideally want on some server somewhere. and the ones that were only, well, impressive still but not mind-blowing, were the ones that you would expect from a computer, the one that you use every day. so this is the problem with benchmarks versus real world use, right?

benchmarks, for them to be like a single meaningful number, they need to do something that's long-running, sustained performance. something like a big export, ray tracer running for a whole video or something. and then that makes complete sense, and then for that they are great. but real world use, most of the time, you're not using your computer as in, like, you're just watching a renderer render things. you are writing code, and hot reloading, or even sometimes recompiling, but, generally, 99% of the time, you're not using your multi-core processor on 100%.

the best benchmark that i found that kind of gives you an idea of how fast a computer works, how fast it is in these day-to-day, minute-to-minute tasks, is speedometer. speedometer basically runs a bunch of web apps in quick succession. and so it it shows how how the computer responds to single core use, because JavaScript is single core (mostly). it also shows how it works in multi-core use because the browser is generally using many cores. and then it also uses the gpu because browsers use gpu to render stuff. but, more importantly, it's about the kind of... it loads the app and immediately runs it, and does a bunch of things, but it's it's not a sustained performance. it's not rendering anything, or building anything. it's it's just, like, quick, very fast things to run, right? so, it's closer to how how normal use of your computer feels like when you're using it. in many, ways it's close to how you use an IDE when you're typing. most of the time, of course, your computer is idle, just waiting for your input. but then you type a new character, and then oftentimes it needs to reparse. which is a single core... parsing a file is a single core computation. but then it also sometimes needs to analyze more than just that one file. it needs to run an analyzer on, maybe, your whole project. or a big chunk of it. which is something between single core and multi-core. and also it needs to update the the UI, of course, so that's that's GPU. these kinds of things, right? and you want to know how your computer will respond when typing that kind of code, to see if this kind of workload, writing code, will be snappy and fast. you can't just look at technical specifications and see, you know, the the processor speed, or anything like that. there are other things in the layout of the computer that are more important. for example, access to memory. how fast can the computer, the CPU, access RAM and you can just look at the maximum theoretical speed. there's more things at play. so the speed could be half of that in in real life. so that's why, if you look at speedometer benchmarks, you'll see that mac studio ultra isn't killing. it's it's not that much better than my old mac, and it's almost no better than a recent macbook Pro with the Max CPU. basically half of the cores. you just can't, for this kind of workload, use all these cores, all this extra power. this also goes back to my expensive windows / linux laptop. it has a speedometer score of 73. versus my macbook Pro that has 183. and it really feels like that. when you use those computers, the macbook, even though it shouldn't, by technical specification, it feels much faster. um especially when browsing the web.

at first i thought that it's just my imagination but it's not. it's really faster.

so, okay, so my current macbook has 183. if you look at the mac Studio Ultra, it has 292. so a lot faster. but again, at this point, does it really matter? it's not a linearly perceivable scale, right? at this point, i'm very happy about the responsiveness of my computer. so not a big deal. but also, if you compare the Studio Ultra to the Macbook Pro Max that is cheaper and older, and has half the cores, and half almost everything, they have the same score. they have 293 speedometer score. so really, at this point, it's overkill.

but speedometer score is about how fast, how snappy it is to use your computer. but software development is also about building, about compilation, about long-running batch tasks, right? true, but it depends. most of us software developers use some kind of a shortened build, a shortened compilation, than what was common in the 90s, right? i'm a software developer using flutter. and flutter has "Hot Reload", which means, i make a change, i hit save, and under a second, even with this computer, under a second i have that change compiled and put into my running app. which means, i hit save, i switch tabs to the app or game, and it's already there. so if something gives me a hundred millisecond faster compile time for "Hot Reload", it doesn't matter. it really doesn't. and it's not just flutter, of course. these days, even if you don't have something like Hot Reload, or Hot Restart, you have at least some part-compilation that lets you build, or at least try your app or game, at some level, maybe just part of it, but without compiling the whole massive thing at once.

and then there are the times where you have to build everything at once, right? like, for example, i need to profile my app so that i can see how it behaves when it's fully compiled in profile mode. so i do that. and that takes time. it could take several seconds, often half a minute, minute. for a really big project, it could take several minutes or even tens of minutes, right? but it's not like a ray tracing job. it's not going to completely halt my progress. i'm not just looking at the terminal as my app or game is building. i am doing other stuff because the building itself is actually just using maybe, i don't know, half of the resources that the computer can give it. and so the rest of the computer is for me to just to keep working. a good developer starts the compilation, starts the build process, and goes to do something else. even if that something else is, you know, getting some coffee.

but you don't just stare at the terminal.

and with that we should be looking at the time difference between the different devices, right? so, my device takes 130 seconds to build something in xcode, right? i found a benchmark and that's what it says. 130 seconds for my device. the mac Studio Ultra takes 67 seconds only. so that's half as much. which is great, right? so this is fantastic. but again, you're doing something else um at the time. you're not just staring at the screen. you're not doing this every minute or every hour. you're doing it, i think, at least in my case, i'm definitely not doing a big build every hour. and it's it's just not... it doesn't correspond to the power of of mac Studio Ultra. mac Studio Ultra, in long-running benchmarks, completely destroys my computer here. like, it's four times, five times faster to export video (in very very specific circumstances) or to render a 3d object. but in xcode, it is only half, i mean twice as fast. and again, you're doing something else while it's fast, so does it really matter? and here i'm comparing my pretty lowly 13-inch macbook Pro from 2020. if you compare to something like the newer 16-inch macbook Pro with the Max chip (not the Ultra, of course, but the Max chip), it's still slower than the mac Studio Ultra, but not by much. i think it takes 93 seconds versus 67 seconds. and again, this is something that happens in the background, so not a big deal.

plus, i should point out that this is an xcode _benchmark_, right? this is designed to to push the limits, and to give the computer as much work as possible in a limited amount of time. it's a benchmark. if we were comparing a build that needs to do more than just exercise the cpu, but an actual xcode build, or android studio build, the differences would be even lower. because a build often does things that are not CPU-bound. it goes to the network and stuff like this. so  the difference there is not that big.

so here we are. if you look at the Cinebench benchmarks, and all the other, like GeekBench benchmarks, and stuff like this, and look at the scores of my current computer, for example, and this beast, the Mac Studio Ultra, you'd be, like, of course, this is such a great investment. Like, you're spending a significant amount of money but you're getting three times as much value from this as from that other thing. so, of course!

but now we're realizing that the real world benchmarks, and the real world value that you get from this, is much lower than what the benchmarks might suggest. and i'm not even talking about the fact that most people these days, if they build code so they need a significant amount of compute, they will probably do it in the cloud. using some CI/CD service. for example, i use Codemagic, which means that, if i want a release build, i commit my code, tag it with something, and send it to github. and then something else will pick it up. in my case, Codemagic's CI/CD pipeline will pick it up. and they will use their computers to build everything and i don't even need to care about it. and then i get an email, right?

for them, for Codemagic, it might make sense to buy a beast like this. and then sell it as a premium service for their customers. so, for example, let's say that your build times improve by five to ten percent in the next five to ten years. like, every build that you do from now on in a CI/CD pipeline is five to ten percent faster. how much money would you give for that opportunity? would it be five thousand eight hundred dollars? not for me. for some bigger studio, sure. for a big company, no problem. but for for a solo dev, or for a small studio, i don't think you would go for that.

and of course then we have the thing that mac Studio is just a box. you don't get a monitor. you don't get keyboard and mouse. and so that's additional things that you need to buy. but that's not the real issue here. the fact is that laptops are better. many times before, i thought about, okay, maybe i will buy a big box that sits under my desk. but it always gets completely steamrolled by the fact that laptops are portable and you can use them anywhere. and i often do! i will take my laptop from this office and i go somewhere and i have everything in it. so i can keep programming. the builds that i have there are there. i don't need to think about synchronizing stuff. i can work, if i have like half an hour at home, i can keep writing code. of course, i have a small screen, so it's not great, but for writing code, if you know what you're writing, and you're writing code, you can do it.

whereas if you have a mac Studio somewhere, you're not going to lug it around. it's going to be there. and if there's a specific environment there that you have set up, you will have to duplicate it anywhere else that you need to work from. 

for me, having one single computer, even in this world of cloud, is so much value. i can do everything from here. and i can take it on a train. i can take it and i can work from home. i can work when meeting someone, before i see them. it's just mind-blowingly powerful to have a full computer including screen and mouse and keyboard in one package that i can put into my backpack. so, yeah, mac Studio Ultra is not worth it for software developers, especially not for, like, solo software developers or smaller studios. if you want an upgrade, then i would suggest get the macbook Pro 16-inch or 14-inch or whatever, with the Max chip. It is basically the same performance, for most purposes. it is cheaper than the mac Studio. it is portable. it's a laptop!

i like how Marques Brownlee concluded his review of mac Studio Ultra, and he was looking at it from the perspective of video editing. "This thing is overkill. And i love that that's the narrative around this computer. like, do you really need that much power? probably not". see? you don't need it.

i hope i saved you some time. and don't forget that if you want to save more time, i have a Udemy course on how to use android Studio shortcuts. to be better and faster at programming. doesn't require a better computer! and that's it from me. see you around.